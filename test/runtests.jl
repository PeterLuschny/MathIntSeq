# This file is part of OLMS (Open Library of Mathematical Sequences).
# Copyright Peter Luschny. License is MIT.

# Version of: UTC 2018-01-29 19:20:33
# 1840a6f0-0521-11e8-1a0a-ab9b8b02fe1b

# Do not edit this file, it is generated from the modules and will be overwritten!
# Edit the modules in the modules directory and build this file with MathIntSeqBuild.jl!

# Reporting a bug please give date, uuid and line number in this file, not of modules.

module runtests
using Base.Test, Nemo, MathIntSeq
oeis_notinstalled()
const ShowTest = false
function SeqTest(seqarray, kind)
if kind == 'A' return SeqATest(seqarray) end
if kind == 'B' return SeqBTest(seqarray) end
if kind == 'L' return SeqLTest(seqarray) end
if kind == 'T' return SeqTTest(seqarray) end
if kind == 'Q' return SeqQTest(seqarray) end
if kind == 'P' return SeqPTest(seqarray) end
end
function SeqATest(seqarray)
for seq in seqarray
name = SeqName(seq)
O = oeis_local(name, 10)
S = SeqArray(10, seq)
if ShowTest
println("A --> ", name); println(O); println(S)
end
AssertSeqArray(S)
@test all(S .== O)
end
end
function SeqBTest(seqarray)
for seq in seqarray
name = SeqName(seq)
O = oeis_local(name, 12)
S = seq(300)
if ShowTest
println("B --> ", name); println(O); println(S)
end
AssertSeqArray(S)
all(S[0:11] .== O[0:11])
end
end
function SeqLTest(seqarray)
for seq in seqarray
name = SeqName(seq)
O = oeis_local(name, 12)
S = seq(12)
if ShowTest
println("L --> ", name); println(O); println(S)
end
AssertSeqArray(S)
@test all(S .== O)
end
end
function xSeqLTest(seqarray)
for seq in seqarray
name = SeqName(seq)
O = oeis_local(name, 6)
S = seq(6)
if ShowTest
println("L --> ", name); println(O); println(S)
end
AssertSeqArray(S)
end
end
function SeqTTest(seqarray)
for seq in seqarray
name = SeqName(seq)
O = oeis_local(name, 21)
S = seq(6)
if ShowTest
println("T --> ", name); println(O); println(S)
end
AssertSeqArray(S)
@test all(S .== O)
end
end
function SeqPTest(seqarray)
for seq in seqarray
name = SeqName(seq)
O = oeis_local(name, 28)
S = seq(7)
if ShowTest
println("P --> ", name); Show(O); Show(S)
end
AssertSeqArray(S)
end
end
# +++ Abundant.jl +++
@testset "Abundant" begin
@test IsAbundant(100800) == true
@test IsAbundant(2402400) == true
@test IsAbundant(49008960) == true
channel = C002093()
for _ in 1:9 take!(channel) end
@test take!(channel) == 18
close(channel)
@test SeqSize(B005101(100)) == 22
if oeis_isinstalled()
SeqTest([L005101, L002093], 'L')
SeqTest([B005101], 'B')
end
end
# +++ Andre.jl +++
@testset "André" begin
@test isa(André(2, 10), fmpz)
@test André(2, 10) == -50521
@test André(2, 50) == -6053285248188621896314383785111649088103498225146815121
@test A178963(30) == 2716778010767155313771539
@test A178964(40) == 11289082167259099068433198467575829
if oeis_isinstalled()
A = [A000111, A178963, A178964, A181936, A250283]
SeqTest(A, 'A')
end
V = [1, 1, 1, 2, 5, 16, 61, 272, 1385, 7936, 50521]
generator = C000111()
for n in 1:10
v = take!(generator)
@test V[n]  == v
end
v = take!(generator)
close(generator)
@test isa(v, fmpz)
end
# +++ BellNumbers.jl +++
@testset "Bell" begin
seq = [1, 1, 2, 5, 15, 52]
len = size(seq)[1]
a = [0, 52, 205, 210, 85, 15, 1]
b = [BellTrans(len, k, seq) for k in 0:len]
@test all(a .== b)
seq = [1, 1, 1, 1, 1, 1]
len = size(seq)[1]
a = SeqArray([1, 0, 1, 0, 1, 1, 0, 1, 3, 1, 0, 1, 7, 6, 1, 0, 1, 15, 25,
10, 1, 0, 1, 31, 90, 65, 15, 1])
b = BellTriangle(len, seq)
@test all(a[0:len - 1] .== b[0:len - 1])
a = [1, 1, 2, 5, 15, 52, 203]
b = [BellNumber(n) for n in 0:6]
@test all(a .== b)
if oeis_isinstalled()
SeqTest([A000110], 'A')
SeqTest([L000110], 'L')
T = [T264428, T137452, T132062, T265606]
SeqTest(T, 'T')
t = [T104556, T001497, T039683, T203412, T004747, T051141,
T119274, T000369, T051142, T137513]
SeqTest(t, 'P')
end
end
# +++ BernoulliNumbers.jl +++
@testset "BernoulliNum" begin
@test BernoulliInt(2, 10) == 79360
@test BernoulliInt(3, 30) == -7708110416280010548302670
@test BernoulliInt(4, 40) == -44494882577309421077208834962882560
@test isa(BernoulliInt(3, 30), fmpz)
@test isa(BernoulliIntList(2, 20)[end], fmpz)
@test isa(Bernoulli(0), fmpq)
@test isa(A027641(10), fmpz)
@test isa(A195441(10), fmpz)
for m in 1:20
@test BernoulliInt(m, 200) == BernoulliIntList(m, 200 + 1)[end]
end
for n in 0:20
@test denominator(Rational(Bernoulli(2 * n))) == ClausenNumber(n)
end
t = fmpz(8622529719094842064796322984685715031642180319435676189471082876882585178647210)
@test A195441(10000) == t
l = SeqArray([0, 1, 2, 3, 8, 25, 96, 427, 2176])
@test all(L065619(9) .== l)
if oeis_isinstalled()
A = [A195441, A281586, A281588, A027641]
SeqTest(A, 'A')
end
end
# +++ BinaryInteger.jl +++
@testset "BinaryInteger" begin
@test A295513(0) == -1
@test A295513(1) == -1
@test A295513(2) == 0
@test A295513(3) == 2
if oeis_isinstalled()
end
end
# +++ BinaryQF.jl +++
Data = Dict{Int, Array{fmpz}}(
002476 => [7, 13, 19, 31, 37, 43, 61, 67, 73, 79, 97, 103],
008784 => [1, 2, 5, 10, 13, 17, 25, 26, 29, 34, 37, 41],
031363 => [1, 4, 5, 9, 11, 16, 19, 20, 25, 29, 31, 36],
034017 => [1, 3, 7, 13, 19, 21, 31, 37, 39, 43, 49, 57],
035251 => [1, 2, 4, 7, 8, 9, 14, 16, 17, 18, 23, 25],
038872 => [5, 11, 19, 29, 31, 41, 59, 61, 71, 79, 89, 101],
038873 => [2, 7, 17, 23, 31, 41, 47, 71, 73, 79, 89, 97],
042965 => [1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16],
057126 => [1, 2, 7, 14, 17, 23, 31, 34, 41, 46, 47, 49],
057127 => [1, 2, 3, 6, 9, 11, 17, 18, 19, 22, 27, 33],
068228 => [13, 37, 61, 73, 97, 109, 157, 181, 193, 229, 241, 277],
084916 => [1, 4, 6, 9, 13, 16, 22, 24, 25, 33, 36, 37],
089270 => [1, 5, 11, 19, 29, 31, 41, 55, 59, 61, 71, 79],
141158 => [5, 11, 19, 29, 31, 41, 59, 61, 71, 79, 89, 101],
242660 => [1, 4, 7, 9, 10, 13, 16, 18, 19, 22, 25, 27],
243655 => [1, 6, 13, 22, 33, 37, 46, 61, 69, 73, 78, 94],
244779 => [1, 2, 4, 7, 8, 11, 14, 16, 22, 23, 28, 29],
244780 => [1, 3, 5, 9, 11, 15, 23, 25, 27, 31, 33, 37],
244819 => [1, 3, 4, 7, 12, 13, 19, 21, 28, 31, 37, 39],
243168 => [1, 4, 9, 13, 16, 24, 25, 33, 36, 37, 49, 52],
244291 => [1, 4, 13, 24, 33, 37, 52, 61, 69, 73, 88, 97],
007522 => [7, 23, 31, 47, 71, 79, 103, 127, 151, 167, 191, 199]
)
B = [B002476, B008784, B031363, B034017, B035251, B038872,
B038873, B042965, B057126, B057127, B068228, B084916, B089270,
B141158, B242660, B243655, B244779, B244780, B244819, B243168,
B244291, B007522]
@testset "BinaryQF" begin
for seq in B
S = seq(300)
AssertSeqArray(S)
anum = SeqNum(seq)
data = SeqArray(Data[anum])
@test all(S[0:11] .== data[0:11])
end
end
# +++ Clausen.jl +++
@testset "Clausen" begin
C = ClausenNumberList(800)
@test C[124] == 30
@test C[780] == 32695402455500348373810
@test C[793] == 6
@test isa(C[781], fmpz)
@test isa(ClausenNumber(10), fmpz)
if oeis_isinstalled()
SeqTest([L002445], 'L')
SeqTest([A002445, A027642], 'A')
end
end
# +++ CombinationsIterator.jl +++
# +++ Counts.jl +++
indicators = [IsPositive, IsEven, IsSquare, IsPrime]
indicatorNames = ["IsPositive", "IsEven", "IsSquare", "IsPrime"]
len = 14
@testset "Counts" begin
@test Nth(96, IsPrime) == 503
@test Nth(97, IsPrime) == 509
@test Nth(98, IsPrime) == 521
@test Count(96, IsPrime) == 24
@test Count(97, IsPrime) == 25
@test Count(98, IsPrime) == 25
@test Last(List(24, IsPrime)) == 89
@test Last(List(25, IsPrime)) == 97
for (i, isA) in enumerate(indicators)
for n in 1:len
@test isA(n) == (Nth(Count(n, isA), isA) == n)
@test     n  ==  Count(Nth(n, isA), isA)
end
end
a = [A257993(n) for n in 1:10]
b = [1, 2, 1, 2, 1, 3, 1, 2, 1, 2]
@test all(a .== b)
if oeis_isinstalled()
L = [
L000961, L002808, L005117, L013928, L246547, L246655
]
SeqTest(L, 'L')
end
end
# +++ DedekindEta.jl +++
@testset "DedekindEta" begin
@test DedekindEtaPowers(0, 1) == fmpz[]
@test isa(DedekindEtaPowers(30, 1)[10], fmpz)
@test isa(DedekindEtaPowers(30, -1)[10], fmpz)
@test RamanujanTau(20) == -7109760
P0 = SeqArray([1, 1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101])
P1 = PartitionNumberList(14)
@test all(P0 .== P1)
if oeis_isinstalled()
L = [L010815, L002107, L010816, L000727, L000728, L000729, L000730,
L000731, L010817, L010819, L000735, L010820, L010821, L010822,
L000739, L010823, L010824, L010825, L010826, L010827, L010828,
L010829, L000594, L010830, L010831, L010832, L010833, L010834,
L010835, L010836, L010837, L010840, L010838, L010839, L010841,
L000041, L000712, L000716, L023003, L023004, L023005, L023006,
L023007, L023008, L023009, L023010, L005758, L023011, L023012,
L023013, L023014, L023015, L023016, L023017, L023018, L023019,
L023020, L023021, L006922, L082556, L082557, L082558, L082559]
SeqTest(L, 'L')
end
end
# +++ Deleham.jl +++
Data = Dict{Int, Array{fmpz}}(
084938 => [1, 0, 1, 0, 1, 1, 0, 2, 2, 1],
060693 => [1, 1, 1, 2, 3, 1, 5, 10, 6, 1],
106566 => [1, 0, 1, 0, 1, 1, 0, 2, 2, 1],
094665 => [1, 0, 1, 0, 1, 3, 0, 4, 15, 15],
090238 => [1, 0, 1, 0, 2, 1, 0, 6, 4, 1],
225478 => [1, 3, 4, 21, 40, 16, 231, 524, 336, 64],
055883 => [1, 1, 1, 2, 4, 2, 5, 15, 15, 5],
184962 => [1, 0, 1, 0, 1, 1, 0, 3, 3, 1],
088969 => [1, 0, 1, 0, 1, 3, 0, 5, 20, 21],
090981 => [1, 1, 0, 1, 1, 0, 1, 4, 1, 0],
011117 => [1, 1, 0, 1, 1, 0, 1, 2, 3, 0]
)
@testset "Deléham" begin
n = 7
B = SeqArray([bell(n) * binomial(n, j) for j in 0:n])
R = Row(T055883(n+1), n)
@test all(B .== R)
a = SeqArray([0, 5040, 2208, 828, 272, 70, 12, 1])
b = Row(T090238(8), 7)
@test all(a .== b)
Seq = [ T084938, T060693, T106566, T094665, T090238, T225478, T055883,
T184962, T088969 ]
for seq in Seq
S = seq(10)
anum = SeqNum(seq)
data = SeqArray(Data[anum])
@test all(S[0:9] .== data[0:9])
end
end
# +++ Fibonacci.jl +++
@testset "Fibonacci" begin
@test isa(FibonacciGeneralized(3, 30), fmpz)
@test isa(FibonacciGeneralizedList(2, 20)[end], fmpz)
@test FibonacciGeneralized(0, 1) == fmpz(0)
@test FibonacciGeneralized(30, 2) == 357913941
@test FibonacciGeneralized(2000, 1) == fmpz("4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125")
@test FibonacciGeneralized(9999, 1) == FibonacciGeneralizedList(10000, 1)[10000]
if oeis_isinstalled()
A = [ A015445, A000045, A001045, A006130, A006131, A015440,
A015441, A015442, A015443 ]
L = [ L000045, L001045, L006130, L006131, L015440, L015441, L015442,
L015443, L015445 ]
for C in [A, L], seq in C
O = oeis_local(SeqName(seq), 10)
O[0] ≠ 0 ? s = 1 : s = 0
C == A ? S = SeqArray(10, seq) : S = SeqArray(seq(10))
@test all(O[0:8] .== S[s:8+s])
end
end
end
# +++ FigurativeNumbers.jl +++
@testset "Figurative" begin
if oeis_isinstalled()
A = [A014107, A067998, A001477, A000217, A000290, A000326,
A000384, A000566, A000567, A001106, A001107, A000292,
A000330, A002411, A002412, A002413, A007584, A007585]
SeqTest(A, 'A')
end
end
# +++ GaussFactorial.jl +++
@testset "GaußFactorial" begin
if oeis_isinstalled()
B = [B033949, B033948]
for seq in B
name = SeqName(seq)
O = oeis_local(name, 12)
S = seq(100)
@test all(S[0:9] .== O[0:9])
end
A = [A001783, A124441, A124442, A066570, A160377, A128247]
for seq in A
name = SeqName(seq)
O = oeis_local(name, 10)
S = SeqArray([seq(n) for n in 1:10])
@test all(S .== O)
end
L = [L124442, L124441, L128247, L160377, L001783, L038610, L103131]
for seq in L
name = SeqName(seq)
O = oeis_local(name, 10)
S = seq(11)
@test all(S[1:10] .== O[0:9])
end
end
end
# +++ GeneralBinomial.jl +++
@testset "Binomial" begin
for n in 0:10, k in 0:n
@test Binomial(n, k) == div(fac(n), (fac(n - k) * fac(k)))
@test Binomial(n, k) == Pascal(n, k)
end
end
# +++ Hyper1F1.jl +++
@testset "Hyper1F1" begin
for n in [10, 73, 150]
@test A000262(n) ≠ 0
@test A007060(n) ≠ 0
@test A033815(n) ≠ 0
@test A099022(n) ≠ 0
@test A251568(n) ≠ 0
end
if oeis_isinstalled()
A = [A000262, A007060, A033815, A099022, A251568]
SeqTest(A, 'A')
end
end
# +++ JacobiTheta.jl +++
@testset "JacobiTheta" begin
@test JacobiTheta3Powers(0, 1) == fmpz[]
@test isa(JacobiTheta3Powers(30, 1)[end], fmpz)
@test isa(JacobiTheta4Powers(30, 1)[end], fmpz)
@test L035016(999 + 1)[end] == -16565884160
@test L035016(1000 + 1)[end] == 18365675328
if oeis_isinstalled()
A = [L000122, L002448, L004018, L104794, L005875, L213384, L000118,
L035016, L008452, L096727, L000132, L000141, L008451, L000143,
L000144, L008453, L000145, L276285, L276286, L276287, L004402,
L004406, L004407, L015128, L004403, L001934, L004404, L004405,
L004408, L004409, L004410, L004411, L004412, L004413, L004414,
L004420, L004421, L004415, L004416, L004417, L004418, L004419,
L004422, L004423, L004424, L004425 ]
SeqTest(A, 'L')
end
end
# +++ Kolakoski.jl +++
@testset "Kolakoski" begin
K = KolakoskiList(100)
@test K[1]  == 1
@test K[33] == 2
@test K[72] == 2
generator = C000002()
for n in [1, 33, 72]
k = take!(generator)
@test K[n] == k
end
close(generator)
end
# +++ Maxima.jl +++
@testset "Maxima" begin
if oeis_isinstalled()
B = [B002183, B002182, B034885, B006093, B006005 ]
L = [L002183, L002182, L034885, L006093, L006005 ]
for seq in B
name = SeqName(seq)
O = oeis_local(name, 12)
S = seq(300)
@test all(S[1:10] .== O[0:9])
end
for seq in L
name = SeqName(seq)
O = oeis_local(name, 12)
S = seq(12)
@test all(S[1:10] .== O[0:9])
end
end
end
# +++ NumberTheory.jl +++
Data = Dict{Int,Array{fmpz}}(034386 => [1, 1, 2, 6, 6, 30, 30, 210, 210, 210],
061142 => [1, 1, 2, 2, 4, 2, 4, 2, 8, 4],
002110 => [1, 2, 6, 30, 210, 2310, 30030, 510510, 9699690, 223092870],
000005 => [0, 1, 2, 2, 3, 2, 4, 2, 4, 3],
000010 => [0, 1, 1, 2, 2, 4, 2, 6, 4, 6],
000203 => [0, 1, 3, 4, 7, 6, 12, 8, 15, 13],
001222 => [0, 0, 1, 1, 2, 1, 2, 1, 3, 2],
001221 => [0, 0, 1, 1, 1, 1, 2, 1, 1, 1],
008683 => [0, 1, -1, -1, 0, -1, 1, -1, 0, 0],
181830 => [0, 1, 0, 0, 0, 1, 0, 2, 2, 2],
034444 => [1, 1, 2, 2, 2, 2, 4, 2, 2, 2])
@testset "NumTheory" begin
@test τ(7560) == 64
@test τ(46080) == 66
@test τ(25920) == 70
@test σ(7560) == 28800
@test σ(46080) == 159666
@test σ(25919) == 25920
@test σ(25920) == 92202
@test ω(7560) == 4
@test ω(46080) == 3
@test ω(25919) == 1
@test ω(25920) == 3
@test Ω(7560) == 8
@test Ω(46080) == 13
@test Ω(25919) == 1
@test Ω(25920) == 11
@test Radical(58564) == 22
@test Radical(58565) == 58565
FB(n::Int) = (r = 1; for k in 1:n ⊥(n, k) && (r = mods(r * k, n)) end; r)
FA(n::Int) = mods(∏([j for j in 1:n if ⊥(j, n)]), n)
for n in 1:20
@test FA(n) == FB(n)
end
if oeis_isinstalled()
A = [A034386, A061142, A002110, A000005, A000010, A000203,
A001222, A001221, A008683, A181830, A034444]
for a in A
S = SeqArray([a(i) for i in 0:9])
anum = SeqNum(a)
data = SeqArray(Data[anum])
@test all(S[0:9] .== data[0:9])
end
L = [L003277]
SeqTest(L, 'L')
end
end
composita = [false, false, false, false, true, false, true, false]
@testset "Queries" begin
for n in 0:7
@test IsComposite(n) == composita[n + 1]
end
end
# +++ OEISUtils.jl +++
if oeis_isinstalled()
info("OEIS data is installed as:")
info(oeis_path())
end
oeis_notinstalled()
# +++ OrthoPolynomials.jl +++
@testset "OrthoPoly" begin
@test isa(OrthoPoly(10, n -> 1, n -> n + 1)[end], fmpz)
@test isa(InvOrthoPoly(10, n -> 1, n -> n + 1)[end], fmpz)
@test RowSums(T217537(8)) == L217924(8)
if oeis_isinstalled()
T = [T066325, T049310, T137338, T104562, T037027, T049218, T159834,
T137286, T053120, T053117, T053121, T216916, T217537, T064189,
T202327, T111062, T099174, T111593, T059419, T026300]
SeqTest(T, 'T')
L = [L217924, L005425, L000085, L001464, L003723, L108624]
SeqTest(L, 'L')
end
end
# +++ Partitions.jl +++
# +++ PrimeSieve.jl +++
# +++ Products.jl +++
@testset "FallingFact" begin
@test FallingFactorial(100, 100) == factorial(BigInt(100))
@test (100 ↓ 100) == factorial(BigInt(100))
@test FallingFactorial(333, 333) == factorial(BigInt(333))
@test FallingFactorial(111, 0) == 1
end
@testset "RisingFact" begin
@test RisingFactorial(11, 11) == 14079294028800
@test (11 ↑ 11) == 14079294028800
@test RisingFactorial(33, 33) == 31344295059422473624824839739793024055460338073600000000
@test RisingFactorial(111, 0) == 1
end
@testset "MultiFact" begin
a = SeqArray([MultiFactorial(2, 1)(n) for n in 0:6])
b = SeqArray([1, 1, 3, 15, 105, 945, 10395])
@test all(a .== b)
end
if oeis_isinstalled()
A = [A000142, A000165, A007696, A001813, A047053, A001147, A008545,
A081125, A000407, A032031, A007559, A008544]
@testset "Products" begin
SeqTest(A, 'A')
end
end
# +++ Recursive2.jl +++
Data = Dict{Int, Array{fmpz}}(
058797 => [1, 1, 1, 2, 7, 33, 191, 1304, 10241],
001040 => [1, 1, 3, 10, 43, 225, 1393, 9976, 81201],
058279 => [1, 1, 4, 17, 89, 551, 3946, 32119, 293017],
001046 => [1, 1, 2, 7, 44, 447, 6749, 142176, 3987677],
036246 => [1, 1, 5, 46, 741, 18571, 669297, 32814124, 2100773233],
024167 => [1, 1, 5, 14, 94, 444, 3828, 25584, 270576],
056953 => [1, 1, 2, 3, 7, 13, 34, 73, 209],
286032 => [1, 1, -1, -4, 0, 20, 20, -120, -280],
000246 => [1, 1, 1, 3, 9, 45, 225, 1575, 11025],
166474 => [1, 1, 2, 5, 17, 67, 322, 1729, 10745],
053602 => [1, 1, 2, 1, 3, 2, 5, 3, 8],
002467 => [1, 1, 4, 15, 76, 455, 3186, 25487, 229384],
005442 => [1, 1, 4, 18, 120, 960, 9360, 105840, 1370880]
)
@testset "Recursive2" begin
if oeis_isinstalled()
Seq = [ L058797, L001040, L058279, L001046, L036246, L024167, L056953,
L286032, L000246, L166474, L053602, L002467, L005442 ]
for seq in Seq
S = seq(9)
anum = SeqNum(seq)
data = SeqArray(Data[anum])
@test all(S[0:8] .== data[0:8])
end
end
end
# +++ SelfConvolutive.jl +++
@testset "SelfConvRec" begin
if oeis_isinstalled()
L = [L005411, L005412, L006012, L006318, L047891, L062980, L082298,
L082301, L082302, L105523, L107716, L111529, L111530, L111531,
L111532, L111533, L146559, L167872]
SeqTest(L, 'L')
end
end
# +++ SeqBase.jl +++
BinTri(n) = SeqTriangle([binomial(k, j) for k in 0:n - 1 for j in 0:k])
X(n, k) = ((k > n || k < 0) && return 0;
(n == 0 && k == 0) && return 1;
4 * X(n - 1, k - 1) + (4 * n - 1) * X(n - 1, k); )
T(n) = SeqTriangle([X(j, k) for j in 0:n for k in 0:j])
@testset "SeqBase" begin
t = T(6)
s = RowReverse(RowReverse(t))
@test all(t .== s)
a = SeqArray([3465, 8784, 7136, 2304, 256])
b = Row(t, 4)
@test all(a .== b)
t = BinTri(8)
a = SeqArray([1, 2, 4, 8, 16, 32, 64, 128])
b = RowSums(t)
@test all(a .== b)
a = SeqArray([1, 0, 0, 0, 0, 0, 0, 0])
b = RowSums(t, true)  # alternating sum
@test all(a .== b)
end
# +++ StirlingLahNumbers.jl +++
@testset "Stirling-Lah" begin
SST = StirlingSetTriangle(6, 2)
a = SeqArray([0, 1, 85, 147, 30, 1])
b = Row(SST, 5)
@test all(a .== b)
SCT = StirlingCycleTriangle(6, 2)
a = SeqArray([0, 576, 820, 273, 30, 1])
b = Row(SCT, 5)
@test all(a .== b)
LT = LahTriangle(6, 2)
a = SeqArray([0, 1700, 2900, 840, 60, 1])
b = Row(LT, 5)
@test all(a .== b)
if oeis_isinstalled()
SLT = [T048993, T132393, T271703, T269945, T269944, T268434, T269948,
T269947, T269946]
SeqTest(SLT, 'T')
end
end
# +++ SwingingFactorial.jl +++
@testset "Swing" begin
@test isa(Swing(30), fmpz)
@test Swing(0)  == 1
@test Swing(27) == 280816200
@test Swing(77) == 530731789949381124304200
@test Swing(98) == 25477612258980856902730428600
@test Swing(1000) == binom(1000, 500)
N = Int(2)^10
@test Swing(N) == binom(N, N>>1)
a = L163085(9)
b = SeqArray([1, 1, 2, 12, 72, 2160, 43200, 6048000, 423360000])
@test all(a .== b)
a = SeqArray([LouisaNumber(n) for n in 0:9])
b = SeqArray([1, 1, 1, 1, 2, 2, 3, 3, 12, 4])
@test all(a .== b)
if oeis_isinstalled()
A = [ A163590, A001790, A001803, A056040, A000984, A002457,
A281594, A080397, A000108, A163641, A049606, A005430, A057977 ]
SeqTest(A, 'A')
end
end
# +++ ZumkellerNumbers.jl +++
@testset "Zumkeller" begin
@test IsZumkeller(17000) == true
@test IsZumkeller(27472) == true
@test IsZumkeller(29062) == false
@test IsZumkeller(43464) == true
end
end # module